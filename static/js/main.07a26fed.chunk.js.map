{"version":3,"sources":["components/pages/ImageEditor/ImageEditor.module.css","components/pages/ImageEditor/index.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","capture","imageWrapper","backgroundImage","frontImage","textWrapper","description","title","text","price","sale","discount","SCALE","ImageEditor","initialState","vertical","horizontal","scale","width","height","file","state","_this","captureRef","React","createRef","handleChange","value","type","setState","Object","defineProperty","handleUpload","event","URL","revokeObjectURL","createObjectURL","target","files","handleClick","prevState","html2canvas","current","then","canvas","img","toDataURL","download","_this2","this","_this$state","react_default","a","createElement","style","className","styles","id","ref","backgroundPosition","concat","transform","contentEditable","contenteditable","onChange","min","max","onClick","Component","App","pages_ImageEditor","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.07a26fed.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"capture\":\"ImageEditor_capture__3oo4-\",\"imageWrapper\":\"ImageEditor_imageWrapper__38opU\",\"backgroundImage\":\"ImageEditor_backgroundImage__Wd_FR\",\"frontImage\":\"ImageEditor_frontImage__2dmxJ\",\"textWrapper\":\"ImageEditor_textWrapper__3HlUq\",\"description\":\"ImageEditor_description__2Goko\",\"title\":\"ImageEditor_title__IDPKk\",\"text\":\"ImageEditor_text__2Nbse\",\"price\":\"ImageEditor_price__Yxb1b\",\"sale\":\"ImageEditor_sale__gDgO3\",\"discount\":\"ImageEditor_discount__2cTkr\"};","import React, { Component } from 'react';\nimport html2canvas from 'html2canvas';\nimport styles from './ImageEditor.module.css';\nimport download from 'downloadjs';\n\nconst SCALE = 2;\n\nclass ImageEditor extends Component {\n  initialState = {\n    vertical: 0,\n    horizontal: 0,\n    scale: 1,\n    width: 540,\n    height: 540,\n    file: null,\n  };\n\n  state = this.initialState;\n\n  captureRef = React.createRef();\n\n  handleChange = (value, type) => {\n    this.setState({ [type]: value });\n  };\n\n  handleUpload = event => {\n    if (this.state.file) {\n      URL.revokeObjectURL(this.state.file);\n    }\n    this.setState({\n      file: URL.createObjectURL(event.target.files[0]),\n    });\n  };\n\n  handleClick = () => {\n    const prevState = this.state;\n    this.setState(\n      state => ({ scale: SCALE, width: state.width * SCALE, height: state.height * SCALE }),\n      () => {\n        html2canvas(this.captureRef.current).then(canvas => {\n          const img = canvas.toDataURL('image/png');\n          download(img, 'original', 'image/png');\n          this.setState(prevState);\n        });\n      },\n    );\n  };\n\n  render() {\n    const { vertical, horizontal, file, width, height, scale } = this.state;\n    return (\n      <div>\n        <div style={{ width: width, height: height }} className={styles.capture} id=\"capture\" ref={this.captureRef}>\n          <div className={styles.imageWrapper} id=\"image\">\n            <div\n              style={{\n                backgroundPosition: `${horizontal}% ${vertical}%`,\n                backgroundImage: file ? `url(${file})` : null,\n              }}\n              className={styles.backgroundImage}\n            />\n            <div className={styles.frontImage} />\n          </div>\n          <div style={{ transform: `scale(${scale})` }} className={styles.textWrapper} id=\"text\">\n            <div className={styles.description}>\n              <h1 className={styles.title} contentEditable=\"true\">\n                Таиланд из Казани\n              </h1>\n              <p className={styles.text} contentEditable=\"true\">\n                Горящие туры на вылет с 19 по 31 января\n              </p>\n              <h2 className={styles.price} contentEditable=\"true\">\n                От 52 900 рублей\n              </h2>\n            </div>\n            <div className={styles.sale}>\n              <h2 className={styles.discount} contenteditable=\"true\">\n                -0%\n              </h2>\n            </div>\n          </div>\n        </div>\n        <input type=\"file\" onChange={this.handleUpload} />\n        <label>\n          Vertical\n          <input\n            value={vertical}\n            type=\"range\"\n            min=\"0\"\n            max=\"100\"\n            onChange={event => this.handleChange(event.target.value, 'vertical')}\n          />\n        </label>\n        <label>\n          Horizontal\n          <input\n            value={horizontal}\n            type=\"range\"\n            min=\"0\"\n            max=\"100\"\n            onChange={event => this.handleChange(event.target.value, 'horizontal')}\n          />\n        </label>\n        <button type=\"button\" onClick={this.handleClick}>\n          Capture\n        </button>\n        <div id=\"result\" />\n      </div>\n    );\n  }\n}\n\nexport default ImageEditor;\n","import React, { Component } from 'react';\nimport ImageEditor from './components/pages/ImageEditor';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <ImageEditor />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}